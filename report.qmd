---
title: "sciRNAseq report"
execute:
  echo: false
toc: true
format:
  html:
    embed-resources: true
    code-fold: true
---

```{python}
#| echo: false
import datetime
from IPython.display import Markdown

Markdown("Generated: " + datetime.datetime.now().isoformat(timespec="minutes", sep=" "))
```

## STAR mapping summary

```{python}
from tabulate import tabulate
from IPython.display import Markdown

with open("star/Log.final.out") as f:
    table = []
    for line in f:
        line = line.strip()
        if not line:
            continue
        if "|" not in line:
            table.append([line, ""])
        else:
            table.append([field.strip() for field in line.split("|")])

Markdown(tabulate(
  table,
))
```

## STAR solo summary

```{python}
with open("star/Solo.out/Gene/Summary.csv") as f:
    table = [line.split(",") for line in f]

Markdown(tabulate(
  table,
#  headers=["Column 1","Column 2"]
))
```

## Barcode rank plot

See [the 10X documentation for an explanation](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/barcode-rank-plot).

```{python}
import matplotlib.pyplot as plt
import pandas as pd
bc = pd.read_table("star/Solo.out/Gene/UMIperCellSorted.txt", header=None, names=["count"])
ax = bc.plot(logx=True, logy=True, legend=False)
ax.set_title("Cells")
ax.set_xlabel("Barcodes")
ax.set_ylabel("UMI counts")
ax.grid()
plt.savefig("barcode-ranks.pdf")
None
```

## Number of cells

```{python}
with open("filtered/barcodes.tsv") as f:
    n_cells = 0
    for line in f:
        n_cells += 1

Markdown(
    f"Number of cells after custom filtering: {n_cells}"
)
```


## Sequencing saturation

```{python}
df = pd.read_table("saturation.tsv", sep="\t")
df["per_cell"] = df["n"] / n_cells
ax = df.plot(x="per_cell", y="saturation", kind="line", ylim=(0, 1.0), xlabel="Mean reads per cell", ylabel="Saturation", legend=False)
ax.set_title("Sequencing saturation")
ax.grid(axis="y")
x = df.iloc[-1].per_cell
sat = df.iloc[-1].saturation
_ = ax.annotate(f"{sat:.4f}", (x, sat), xytext=(x, sat + 0.05), bbox=dict(facecolor="white"))
```

```{python}
Markdown(
    f"Mean reads per cell: {x:.1f}\n\nSaturation: {sat:.4f}"
)
```

## P7 index mismatch statistics

This table is also available in tab-separated value format in
`p7-mismatches.tsv`.

```{python}
df = pd.read_table("p7-mismatches.tsv", index_col=0)
df["perfect_percent"] = (df["perfect"] / df["total"] * 100.).round(1)
if df["lane"].isna().all():
    del df["lane"]
else:
    df = df.set_index("lane", append=True)

pd.set_option("display.max_rows", None)
pd.set_option("display.max_columns", None)
pd.set_option("display.expand_frame_repr", False)
df
```
